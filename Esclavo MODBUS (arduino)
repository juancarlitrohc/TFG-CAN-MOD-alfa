#define TRIGGER 6
#define ECHO 7

#define BLUE 9
#define GREEN 10
#define RED 11

const int EnTxPin2 =  2;  // HIGH:TX y LOW:RX
const int midireccion = 101; //Direccion del esclavo
const int maestro = 100;

int DISTANCIA;
bool EsperandoValor = false;
int COLOR;

char inChar;

enum EstadosLectura
{
  InicioLeerTrama,
  ComprobarDireccion,
  LeerOrden,
  LeerCampoValor,
  FinLeerTrama,
};

enum Ordenes
{
  LedRGB,
  ValorUltrasonido,
};

EstadosLectura EstadoActual;

void setup() 
{
  Serial.begin(9600);  
  Serial.setTimeout(100);  //establecemos un tiempo de espera de 100ms
  
  pinMode(EnTxPin2, OUTPUT);
  digitalWrite(EnTxPin2, LOW); //RS485 como receptor

  //ultrasonido
  pinMode(ECHO, INPUT);
  pinMode(TRIGGER, OUTPUT);
  digitalWrite(TRIGGER, LOW);

  //LED
  pinMode(RED, OUTPUT);
  pinMode(GREEN, OUTPUT);
  pinMode(BLUE, OUTPUT);

  analogWrite(RED, 0);
  analogWrite(GREEN, 0);
  analogWrite(BLUE, 0);

  EstadoActual=InicioLeerTrama;
} 


//Con Loop podremos ver el mensaje completo
void loop() 
{ 
  if (inChar == 'F')
  {
    Serial.println(DISTANCIA);
    inChar='t';
  }
}

void FInicioLeerTrama()
{
  if(inChar == 'I') //Inicio de trama correcto
  {
    EstadoActual = ComprobarDireccion;
  }
}

void FComprobarDireccion()
{
  if((int)inChar == midireccion)//Si el mensaje es para mi
  {
    EstadoActual = LeerOrden;
  }
  else EstadoActual = InicioLeerTrama;
}


void FLeerOrden()
{
  switch(inChar)
  {
    case 'U' : Ultrasonido(); break;
    case 'L' : LED(); 
          break;
  }
  EstadoActual = LeerCampoValor;
}

void Ultrasonido()
{
  int distance, duration;
  digitalWrite(TRIGGER, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER, LOW);
  duration = pulseIn(ECHO,HIGH);
  distance = duration / 2 / 7.6;
  DISTANCIA = distance;
}

void LED()
{
  //tenemos que leer el siguiente valor de la trama
  EsperandoValor = true;
}

void FLeerCampoValor()
{
  if(EsperandoValor == true)
  {
    COLOR = (int)inChar;
    CambiarColorLED();
    EsperandoValor=false;
  }
  EstadoActual = FinLeerTrama;
}

void CambiarColorLED()
{
  switch(COLOR)
  {
    case 0 : analogWrite(BLUE, 0);
               analogWrite(GREEN, 0);
               analogWrite(RED, 0);
               break;
    case 1 : analogWrite(BLUE, 255);
               analogWrite(GREEN, 0);
               analogWrite(RED, 0);
               break;
    case 2 : analogWrite(BLUE, 0);
               analogWrite(GREEN, 255);
               analogWrite(RED, 0);
               break;
    case 3 : analogWrite(BLUE, 255);
               analogWrite(GREEN, 255);
               analogWrite(RED, 0);
               break;
    case 4 : analogWrite(BLUE, 0);
               analogWrite(GREEN, 0);
               analogWrite(RED, 255);
               break;
    case 5 : analogWrite(BLUE, 255);
               analogWrite(GREEN, 0);
               analogWrite(RED, 255);
               break;
    case 6 : analogWrite(BLUE, 0);
               analogWrite(GREEN, 255);
               analogWrite(RED, 255);
               break;
    case 7 : analogWrite(BLUE, 255);
               analogWrite(GREEN, 255);
               analogWrite(RED, 255);
               break;
  }
}

void FFinLeerTrama()
{
  if(inChar != 'F')
  {
    Serial.println("Fin Trama erroneo");
  }
   EstadoActual = InicioLeerTrama;
}



//Con esta funcion podemos comprobar cada 8bits
void serialEvent()
{
  while(Serial.available())
  {
    inChar = (char)Serial.read();
     
       
    switch(EstadoActual)
    {
      case EstadosLectura::InicioLeerTrama : 
                  Serial.print(inChar);
                  Serial.print(" ");
                  FInicioLeerTrama();
            break;
      case EstadosLectura::ComprobarDireccion : 
                  Serial.print((int)inChar);
                  Serial.print(" ");
                  FComprobarDireccion();
            break;
      case EstadosLectura::LeerOrden : 
                  Serial.print(inChar);
                  Serial.print(" ");
                  FLeerOrden();
            break;
      case EstadosLectura::LeerCampoValor : 
                  Serial.print((int)inChar); 
                  Serial.print(" "); 
                  FLeerCampoValor();
            break;
      case EstadosLectura::FinLeerTrama :
                  Serial.print((char)inChar);
                  Serial.println(" ");
                  FFinLeerTrama();
            break;
    }
    
  }
}
